{"version":3,"sources":["components/Footer.js","components/AccomplishedTask.js","components/Target.js","components/TargetCalculator.js","components/CurrentGoalDisplay.js","components/CurrentAchievedDisplay.js","layout/Main.js","App.js","serviceWorker.js","index.js"],"names":["Footer","href","AccomplishedTask","myAccomplished","useState","accomplished","setAccomplished","className","aria-hidden","type","name","value","onChange","e","target","onClick","Target","myTarget","f","setTarget","id","TargetCalculator","size","Math","round","parseInt","CurrentGoalDisplay","CurrentAchievedDisplay","acc","Main","setAcc","val","gottenAcc","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cb887b26.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Footer = () => {\n  return (\n    <footer>\n      <hr />\n\n      <a href=\"https://github.com/hinn254\">\n        Designed by Benny &copy; Bennyworld\n      </a>\n      <hr />\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React, { useState } from \"react\";\n\nconst AccomplishedTask = ({ myAccomplished }) => {\n  const [accomplished, setAccomplished] = useState(\"\");\n\n  const handleChange = () => {\n    // console.log(\"GOOOOO\");\n    myAccomplished(accomplished);\n    setAccomplished(\"\");\n  };\n  return (\n    <div className=\"result val\">\n      <h3 className=\"title\">Accomplished target</h3>\n      <span className=\"title-show\">\n        <i className=\"fa fa-arrows-h fa-2x\" aria-hidden=\"true\"></i>\n      </span>\n      <input\n        className=\"title-out\"\n        type=\"text\"\n        name=\"accomplished\"\n        value={accomplished}\n        onChange={(e) => setAccomplished(e.target.value)}\n      />\n      <button onClick={handleChange}>Add</button>\n    </div>\n  );\n};\n\nexport default AccomplishedTask;\n","import React, { useState } from \"react\";\n\nconst Target = ({ myTarget = (f) => f }) => {\n  const [target, setTarget] = useState(\"\");\n\n  const enteredTarget = () => {\n    myTarget(target);\n    setTarget(\"\");\n  };\n\n  return (\n    <div className=\"result val\">\n      <h3 className=\"title\">Your target</h3>\n      <span className=\"title-show\">\n        <i className=\"fa fa-arrows-h fa-2x\" aria-hidden=\"true\"></i>\n      </span>\n      <input\n        className=\"title-out\"\n        type=\"text\"\n        name=\"accomplished\"\n        id=\"accom\"\n        value={target}\n        onChange={(e) => setTarget(e.target.value)}\n      />\n      <button onClick={enteredTarget}>Add</button>\n    </div>\n  );\n};\n\nexport default Target;\n","import React from \"react\";\nimport { FcComboChart } from \"react-icons/fc\";\n\nconst TargetCalculator = ({ target, myAccomplished }) => {\n  return (\n    <div className=\"result calculate\">\n      <h2 className=\"calculate-title\">Your achievement</h2>\n      <span className=\"calculate-show\">\n        <FcComboChart size=\"50px\" />\n      </span>\n      <h3 className=\"title-out\">\n        {target === \" \" || myAccomplished === \" \"\n          ? \"Calculating...\"\n          : Math.round(parseInt(target, 0) / parseInt(myAccomplished, 0)) *\n            100}{\" \"}\n        %\n      </h3>\n    </div>\n  );\n};\n\nexport default TargetCalculator;\n","import React from \"react\";\n\nconst CurrentGoalDisplay = ({ target }) => {\n  return (\n    <div className=\"result\">\n      <h3 className=\"title\">Goal</h3>\n      <span className=\"title-show\">\n        <i className=\"fa fa-hand-o-right\" aria-hidden=\"true\"></i>\n      </span>\n      <h3 className=\"title-out\">{target}</h3>\n    </div>\n  );\n};\n\nexport default CurrentGoalDisplay;\n","import React from \"react\";\n\nconst CurrentAchievedDisplay = ({ acc }) => {\n  return (\n    <div className=\"result\">\n      <h3 className=\"title\">Achieved</h3>\n      <span className=\"title-show\">\n        <i className=\"fa fa-hand-o-right\" aria-hidden=\"true\"></i>\n      </span>\n      <h3 className=\"title-out\">{acc}</h3>\n    </div>\n  );\n};\n\nexport default CurrentAchievedDisplay;\n","import React, { useState } from \"react\";\nimport AccomplishedTask from \"../components/AccomplishedTask\";\nimport Target from \"../components/Target\";\nimport TargetCalculator from \"../components/TargetCalculator\";\nimport CurrentGoalDisplay from \"../components/CurrentGoalDisplay\";\nimport CurrentAchievedDisplay from \"../components/CurrentAchievedDisplay\";\n\nconst Main = () => {\n  const [target, setTarget] = useState(0);\n  const [acc, setAcc] = useState(0);\n\n  const myTarget = (val) => {\n    setTarget(val);\n  };\n\n  const myAccomplished = (gottenAcc) => {\n    setAcc(gottenAcc);\n  };\n\n  const clearInput = () => {\n    setAcc(0);\n    setTarget(0);\n  };\n\n  return (\n    <div className=\"outer-box\">\n      <div className=\"box\">\n        <h1>DAILY TASK COUNTER</h1>\n        <CurrentAchievedDisplay acc={acc} />\n\n        <hr />\n        <CurrentGoalDisplay target={target} />\n\n        <hr />\n        <TargetCalculator target={target} myAccomplished={acc} />\n\n        <hr />\n        <Target myTarget={myTarget} />\n\n        <AccomplishedTask myAccomplished={myAccomplished} />\n        <button onClick={clearInput} className=\"clear\">\n          Clear Entries\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Main;\n","import React from \"react\";\nimport \"./App.css\";\nimport Footer from \"./components/Footer\";\n\nimport Main from \"./layout/Main\";\n\nfunction App() {\n  return (\n    <>\n      <Main />\n\n      <div className=\"foot\">\n        <Footer />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}